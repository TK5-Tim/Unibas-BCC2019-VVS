@startuml VVS_classes
class Vorsorge {
    String orgaFrom
    uint kundeSV
    uint balance 
    bool orgaChangeStarted 
    struct orga 
    orga[] orgas
    String orgaTo
    String orgaNow
    function startOrgaChange(string _orgaFrom, uint _kundeSV, uint _balance) 
    function orgaIsPart(string _orga) public returns (bool)
    function addressIsPart(address _address) public returns (bool) 
    function getCurrentOrga() public view returns (string) 
    function getHash() public view returns(bytes32)
    function getBalance(uint _transactionNr, string currOrga, uint _kundeSV) 
}
class OrgaChange {
    uint transactionNr
    

    function startOrgaChange(string _orgaFrom, uint _kundeSV, uint _balance) 
    function getOrga(string _orgaTo) 
    function finishOrgaChange() private
    function getHash() public view returns(bytes32)




}
class Info {
    uint kundeSV
    function getCurrentOrga() public view returns (string) 
    function getBalance(uint _transactionNr, string currOrga, uint _kundeSV) 
}
class Identifikation {
    function verifyID(uint _KundeSV) public view returns(bool)
    function getID() private view returns (bool)

}
class VerifyTransaction {

function getVerification(string _orgaFrom, string _orgaTo, int _kundeSV, int _balance, uint _ref) 

}

Vorsorge --> OrgaChange : delegatecall
Vorsorge --> Info : delegatecall
Vorsorge --> VerifyTransaction : delegatecall 
OrgaChange --> Identifikation : call
Info --> Identifikation: call
VerifyTransaction --> Identifikation: call

@enduml
